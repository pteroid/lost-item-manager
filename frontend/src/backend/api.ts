// tslint:disable
/**
 * Lost Item Manager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Admin
     */
    is_active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    full_name?: string;
    /**
     * 
     * @type {number}
     * @memberof Admin
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface AdminCreate
 */
export interface AdminCreate {
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminCreate
     */
    is_active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    full_name?: string;
    /**
     * 
     * @type {number}
     * @memberof AdminCreate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminCreate
     */
    password: string;
}
/**
 * 
 * @export
 * @interface AdminUpdate
 */
export interface AdminUpdate {
    /**
     * 
     * @type {string}
     * @memberof AdminUpdate
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdate
     */
    is_active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdate
     */
    full_name?: string;
    /**
     * 
     * @type {number}
     * @memberof AdminUpdate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminUpdate
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface BodyCreateOpenedAdminApiV1AdminsOpenPost
 */
export interface BodyCreateOpenedAdminApiV1AdminsOpenPost {
    /**
     * 
     * @type {string}
     * @memberof BodyCreateOpenedAdminApiV1AdminsOpenPost
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof BodyCreateOpenedAdminApiV1AdminsOpenPost
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof BodyCreateOpenedAdminApiV1AdminsOpenPost
     */
    full_name?: string;
}
/**
 * 
 * @export
 * @interface BodyLoginAccessTokenApiV1LoginAccessTokenPost
 */
export interface BodyLoginAccessTokenApiV1LoginAccessTokenPost {
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    grant_type?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    client_id?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginAccessTokenApiV1LoginAccessTokenPost
     */
    client_secret?: string;
}
/**
 * 
 * @export
 * @interface BodyResetPasswordApiV1ResetPasswordPost
 */
export interface BodyResetPasswordApiV1ResetPasswordPost {
    /**
     * 
     * @type {string}
     * @memberof BodyResetPasswordApiV1ResetPasswordPost
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof BodyResetPasswordApiV1ResetPasswordPost
     */
    new_password: string;
}
/**
 * 
 * @export
 * @interface BodyUpdateCurrentAdminApiV1AdminsMePut
 */
export interface BodyUpdateCurrentAdminApiV1AdminsMePut {
    /**
     * 
     * @type {string}
     * @memberof BodyUpdateCurrentAdminApiV1AdminsMePut
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyUpdateCurrentAdminApiV1AdminsMePut
     */
    full_name?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyUpdateCurrentAdminApiV1AdminsMePut
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    picked_at: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    place_id: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    kind_id: number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    image_url?: string;
}
/**
 * 
 * @export
 * @interface ItemCreate
 */
export interface ItemCreate {
    /**
     * 
     * @type {number}
     * @memberof ItemCreate
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ItemCreate
     */
    picked_at: string;
    /**
     * 
     * @type {number}
     * @memberof ItemCreate
     */
    place_id: number;
    /**
     * 
     * @type {number}
     * @memberof ItemCreate
     */
    kind_id: number;
    /**
     * 
     * @type {string}
     * @memberof ItemCreate
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCreate
     */
    image_url?: string;
}
/**
 * 
 * @export
 * @interface ItemUpdate
 */
export interface ItemUpdate {
    /**
     * 
     * @type {number}
     * @memberof ItemUpdate
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ItemUpdate
     */
    picked_at: string;
    /**
     * 
     * @type {number}
     * @memberof ItemUpdate
     */
    place_id: number;
    /**
     * 
     * @type {number}
     * @memberof ItemUpdate
     */
    kind_id: number;
    /**
     * 
     * @type {string}
     * @memberof ItemUpdate
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemUpdate
     */
    image_url?: string;
}
/**
 * 
 * @export
 * @interface Kind
 */
export interface Kind {
    /**
     * 
     * @type {number}
     * @memberof Kind
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Kind
     */
    name: string;
}
/**
 * 
 * @export
 * @interface KindCreate
 */
export interface KindCreate {
    /**
     * 
     * @type {number}
     * @memberof KindCreate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof KindCreate
     */
    name: string;
}
/**
 * 
 * @export
 * @interface KindUpdate
 */
export interface KindUpdate {
    /**
     * 
     * @type {number}
     * @memberof KindUpdate
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof KindUpdate
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Msg
 */
export interface Msg {
    /**
     * 
     * @type {string}
     * @memberof Msg
     */
    msg: string;
}
/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {number}
     * @memberof Place
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    name: string;
}
/**
 * 
 * @export
 * @interface PlaceCreate
 */
export interface PlaceCreate {
    /**
     * 
     * @type {number}
     * @memberof PlaceCreate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PlaceCreate
     */
    name: string;
}
/**
 * 
 * @export
 * @interface PlaceUpdate
 */
export interface PlaceUpdate {
    /**
     * 
     * @type {number}
     * @memberof PlaceUpdate
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PlaceUpdate
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    token_type: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new admin.
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminApiV1AdminsPost(adminCreate: AdminCreate, options: any = {}): RequestArgs {
            // verify required parameter 'adminCreate' is not null or undefined
            if (adminCreate === null || adminCreate === undefined) {
                throw new RequiredError('adminCreate','Required parameter adminCreate was null or undefined when calling createAdminApiV1AdminsPost.');
            }
            const localVarPath = `/api/v1/admins/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof adminCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(adminCreate !== undefined ? adminCreate : {}) : (adminCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new admin without the need to be logged in.
         * @summary Create Opened Admin
         * @param {BodyCreateOpenedAdminApiV1AdminsOpenPost} bodyCreateOpenedAdminApiV1AdminsOpenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost: BodyCreateOpenedAdminApiV1AdminsOpenPost, options: any = {}): RequestArgs {
            // verify required parameter 'bodyCreateOpenedAdminApiV1AdminsOpenPost' is not null or undefined
            if (bodyCreateOpenedAdminApiV1AdminsOpenPost === null || bodyCreateOpenedAdminApiV1AdminsOpenPost === undefined) {
                throw new RequiredError('bodyCreateOpenedAdminApiV1AdminsOpenPost','Required parameter bodyCreateOpenedAdminApiV1AdminsOpenPost was null or undefined when calling createOpenedAdminApiV1AdminsOpenPost.');
            }
            const localVarPath = `/api/v1/admins/open`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyCreateOpenedAdminApiV1AdminsOpenPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyCreateOpenedAdminApiV1AdminsOpenPost !== undefined ? bodyCreateOpenedAdminApiV1AdminsOpenPost : {}) : (bodyCreateOpenedAdminApiV1AdminsOpenPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific admin by id.
         * @summary Read Admin By Id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminByIdApiV1AdminsAdminIdGet(adminId: number, options: any = {}): RequestArgs {
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling readAdminByIdApiV1AdminsAdminIdGet.');
            }
            const localVarPath = `/api/v1/admins/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve admins.
         * @summary Read Admins
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminsApiV1AdminsGet(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/admins/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current admin.
         * @summary Read Current Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCurrentAdminApiV1AdminsMeGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/admins/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a admin.
         * @summary Update Admin
         * @param {number} adminId 
         * @param {AdminUpdate} adminUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminApiV1AdminsAdminIdPut(adminId: number, adminUpdate: AdminUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling updateAdminApiV1AdminsAdminIdPut.');
            }
            // verify required parameter 'adminUpdate' is not null or undefined
            if (adminUpdate === null || adminUpdate === undefined) {
                throw new RequiredError('adminUpdate','Required parameter adminUpdate was null or undefined when calling updateAdminApiV1AdminsAdminIdPut.');
            }
            const localVarPath = `/api/v1/admins/{admin_id}`
                .replace(`{${"admin_id"}}`, encodeURIComponent(String(adminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof adminUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(adminUpdate !== undefined ? adminUpdate : {}) : (adminUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update own admin.
         * @summary Update Current Admin
         * @param {BodyUpdateCurrentAdminApiV1AdminsMePut} [bodyUpdateCurrentAdminApiV1AdminsMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut?: BodyUpdateCurrentAdminApiV1AdminsMePut, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/admins/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyUpdateCurrentAdminApiV1AdminsMePut !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyUpdateCurrentAdminApiV1AdminsMePut !== undefined ? bodyUpdateCurrentAdminApiV1AdminsMePut : {}) : (bodyUpdateCurrentAdminApiV1AdminsMePut || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new admin.
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminApiV1AdminsPost(adminCreate: AdminCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).createAdminApiV1AdminsPost(adminCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create new admin without the need to be logged in.
         * @summary Create Opened Admin
         * @param {BodyCreateOpenedAdminApiV1AdminsOpenPost} bodyCreateOpenedAdminApiV1AdminsOpenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost: BodyCreateOpenedAdminApiV1AdminsOpenPost, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific admin by id.
         * @summary Read Admin By Id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminByIdApiV1AdminsAdminIdGet(adminId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).readAdminByIdApiV1AdminsAdminIdGet(adminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve admins.
         * @summary Read Admins
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminsApiV1AdminsGet(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admin>> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).readAdminsApiV1AdminsGet(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get current admin.
         * @summary Read Current Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCurrentAdminApiV1AdminsMeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).readCurrentAdminApiV1AdminsMeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a admin.
         * @summary Update Admin
         * @param {number} adminId 
         * @param {AdminUpdate} adminUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminApiV1AdminsAdminIdPut(adminId: number, adminUpdate: AdminUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).updateAdminApiV1AdminsAdminIdPut(adminId, adminUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update own admin.
         * @summary Update Current Admin
         * @param {BodyUpdateCurrentAdminApiV1AdminsMePut} [bodyUpdateCurrentAdminApiV1AdminsMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut?: BodyUpdateCurrentAdminApiV1AdminsMePut, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new admin.
         * @summary Create Admin
         * @param {AdminCreate} adminCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdminApiV1AdminsPost(adminCreate: AdminCreate, options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).createAdminApiV1AdminsPost(adminCreate, options)(axios, basePath);
        },
        /**
         * Create new admin without the need to be logged in.
         * @summary Create Opened Admin
         * @param {BodyCreateOpenedAdminApiV1AdminsOpenPost} bodyCreateOpenedAdminApiV1AdminsOpenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost: BodyCreateOpenedAdminApiV1AdminsOpenPost, options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost, options)(axios, basePath);
        },
        /**
         * Get a specific admin by id.
         * @summary Read Admin By Id
         * @param {number} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminByIdApiV1AdminsAdminIdGet(adminId: number, options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).readAdminByIdApiV1AdminsAdminIdGet(adminId, options)(axios, basePath);
        },
        /**
         * Retrieve admins.
         * @summary Read Admins
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAdminsApiV1AdminsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Admin>> {
            return AdminsApiFp(configuration).readAdminsApiV1AdminsGet(skip, limit, options)(axios, basePath);
        },
        /**
         * Get current admin.
         * @summary Read Current Admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCurrentAdminApiV1AdminsMeGet(options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).readCurrentAdminApiV1AdminsMeGet(options)(axios, basePath);
        },
        /**
         * Update a admin.
         * @summary Update Admin
         * @param {number} adminId 
         * @param {AdminUpdate} adminUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdminApiV1AdminsAdminIdPut(adminId: number, adminUpdate: AdminUpdate, options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).updateAdminApiV1AdminsAdminIdPut(adminId, adminUpdate, options)(axios, basePath);
        },
        /**
         * Update own admin.
         * @summary Update Current Admin
         * @param {BodyUpdateCurrentAdminApiV1AdminsMePut} [bodyUpdateCurrentAdminApiV1AdminsMePut] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut?: BodyUpdateCurrentAdminApiV1AdminsMePut, options?: any): AxiosPromise<Admin> {
            return AdminsApiFp(configuration).updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut, options)(axios, basePath);
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * Create new admin.
     * @summary Create Admin
     * @param {AdminCreate} adminCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public createAdminApiV1AdminsPost(adminCreate: AdminCreate, options?: any) {
        return AdminsApiFp(this.configuration).createAdminApiV1AdminsPost(adminCreate, options)(this.axios, this.basePath);
    }

    /**
     * Create new admin without the need to be logged in.
     * @summary Create Opened Admin
     * @param {BodyCreateOpenedAdminApiV1AdminsOpenPost} bodyCreateOpenedAdminApiV1AdminsOpenPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost: BodyCreateOpenedAdminApiV1AdminsOpenPost, options?: any) {
        return AdminsApiFp(this.configuration).createOpenedAdminApiV1AdminsOpenPost(bodyCreateOpenedAdminApiV1AdminsOpenPost, options)(this.axios, this.basePath);
    }

    /**
     * Get a specific admin by id.
     * @summary Read Admin By Id
     * @param {number} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public readAdminByIdApiV1AdminsAdminIdGet(adminId: number, options?: any) {
        return AdminsApiFp(this.configuration).readAdminByIdApiV1AdminsAdminIdGet(adminId, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve admins.
     * @summary Read Admins
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public readAdminsApiV1AdminsGet(skip?: number, limit?: number, options?: any) {
        return AdminsApiFp(this.configuration).readAdminsApiV1AdminsGet(skip, limit, options)(this.axios, this.basePath);
    }

    /**
     * Get current admin.
     * @summary Read Current Admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public readCurrentAdminApiV1AdminsMeGet(options?: any) {
        return AdminsApiFp(this.configuration).readCurrentAdminApiV1AdminsMeGet(options)(this.axios, this.basePath);
    }

    /**
     * Update a admin.
     * @summary Update Admin
     * @param {number} adminId 
     * @param {AdminUpdate} adminUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public updateAdminApiV1AdminsAdminIdPut(adminId: number, adminUpdate: AdminUpdate, options?: any) {
        return AdminsApiFp(this.configuration).updateAdminApiV1AdminsAdminIdPut(adminId, adminUpdate, options)(this.axios, this.basePath);
    }

    /**
     * Update own admin.
     * @summary Update Current Admin
     * @param {BodyUpdateCurrentAdminApiV1AdminsMePut} [bodyUpdateCurrentAdminApiV1AdminsMePut] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut?: BodyUpdateCurrentAdminApiV1AdminsMePut, options?: any) {
        return AdminsApiFp(this.configuration).updateCurrentAdminApiV1AdminsMePut(bodyUpdateCurrentAdminApiV1AdminsMePut, options)(this.axios, this.basePath);
    }

}


/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new item.
         * @summary Create Item
         * @param {ItemCreate} itemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemApiV1ItemsPost(itemCreate: ItemCreate, options: any = {}): RequestArgs {
            // verify required parameter 'itemCreate' is not null or undefined
            if (itemCreate === null || itemCreate === undefined) {
                throw new RequiredError('itemCreate','Required parameter itemCreate was null or undefined when calling createItemApiV1ItemsPost.');
            }
            const localVarPath = `/api/v1/items/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof itemCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(itemCreate !== undefined ? itemCreate : {}) : (itemCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item.
         * @summary Delete Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemApiV1ItemsIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteItemApiV1ItemsIdDelete.');
            }
            const localVarPath = `/api/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get item by ID.
         * @summary Read Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemApiV1ItemsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readItemApiV1ItemsIdGet.');
            }
            const localVarPath = `/api/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve items.
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemsApiV1ItemsGet(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/items/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an item.
         * @summary Update Item
         * @param {number} id 
         * @param {ItemUpdate} itemUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemApiV1ItemsIdPut(id: number, itemUpdate: ItemUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateItemApiV1ItemsIdPut.');
            }
            // verify required parameter 'itemUpdate' is not null or undefined
            if (itemUpdate === null || itemUpdate === undefined) {
                throw new RequiredError('itemUpdate','Required parameter itemUpdate was null or undefined when calling updateItemApiV1ItemsIdPut.');
            }
            const localVarPath = `/api/v1/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof itemUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(itemUpdate !== undefined ? itemUpdate : {}) : (itemUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new item.
         * @summary Create Item
         * @param {ItemCreate} itemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemApiV1ItemsPost(itemCreate: ItemCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ItemsApiAxiosParamCreator(configuration).createItemApiV1ItemsPost(itemCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an item.
         * @summary Delete Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemApiV1ItemsIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ItemsApiAxiosParamCreator(configuration).deleteItemApiV1ItemsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get item by ID.
         * @summary Read Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemApiV1ItemsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ItemsApiAxiosParamCreator(configuration).readItemApiV1ItemsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve items.
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemsApiV1ItemsGet(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>> {
            const localVarAxiosArgs = ItemsApiAxiosParamCreator(configuration).readItemsApiV1ItemsGet(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an item.
         * @summary Update Item
         * @param {number} id 
         * @param {ItemUpdate} itemUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemApiV1ItemsIdPut(id: number, itemUpdate: ItemUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = ItemsApiAxiosParamCreator(configuration).updateItemApiV1ItemsIdPut(id, itemUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new item.
         * @summary Create Item
         * @param {ItemCreate} itemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemApiV1ItemsPost(itemCreate: ItemCreate, options?: any): AxiosPromise<Item> {
            return ItemsApiFp(configuration).createItemApiV1ItemsPost(itemCreate, options)(axios, basePath);
        },
        /**
         * Delete an item.
         * @summary Delete Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemApiV1ItemsIdDelete(id: number, options?: any): AxiosPromise<Item> {
            return ItemsApiFp(configuration).deleteItemApiV1ItemsIdDelete(id, options)(axios, basePath);
        },
        /**
         * Get item by ID.
         * @summary Read Item
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemApiV1ItemsIdGet(id: number, options?: any): AxiosPromise<Item> {
            return ItemsApiFp(configuration).readItemApiV1ItemsIdGet(id, options)(axios, basePath);
        },
        /**
         * Retrieve items.
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItemsApiV1ItemsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Item>> {
            return ItemsApiFp(configuration).readItemsApiV1ItemsGet(skip, limit, options)(axios, basePath);
        },
        /**
         * Update an item.
         * @summary Update Item
         * @param {number} id 
         * @param {ItemUpdate} itemUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemApiV1ItemsIdPut(id: number, itemUpdate: ItemUpdate, options?: any): AxiosPromise<Item> {
            return ItemsApiFp(configuration).updateItemApiV1ItemsIdPut(id, itemUpdate, options)(axios, basePath);
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Create new item.
     * @summary Create Item
     * @param {ItemCreate} itemCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public createItemApiV1ItemsPost(itemCreate: ItemCreate, options?: any) {
        return ItemsApiFp(this.configuration).createItemApiV1ItemsPost(itemCreate, options)(this.axios, this.basePath);
    }

    /**
     * Delete an item.
     * @summary Delete Item
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public deleteItemApiV1ItemsIdDelete(id: number, options?: any) {
        return ItemsApiFp(this.configuration).deleteItemApiV1ItemsIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * Get item by ID.
     * @summary Read Item
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public readItemApiV1ItemsIdGet(id: number, options?: any) {
        return ItemsApiFp(this.configuration).readItemApiV1ItemsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve items.
     * @summary Read Items
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public readItemsApiV1ItemsGet(skip?: number, limit?: number, options?: any) {
        return ItemsApiFp(this.configuration).readItemsApiV1ItemsGet(skip, limit, options)(this.axios, this.basePath);
    }

    /**
     * Update an item.
     * @summary Update Item
     * @param {number} id 
     * @param {ItemUpdate} itemUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public updateItemApiV1ItemsIdPut(id: number, itemUpdate: ItemUpdate, options?: any) {
        return ItemsApiFp(this.configuration).updateItemApiV1ItemsIdPut(id, itemUpdate, options)(this.axios, this.basePath);
    }

}


/**
 * KindsApi - axios parameter creator
 * @export
 */
export const KindsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new kind.
         * @summary Create Kind
         * @param {KindCreate} kindCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKindApiV1KindsPost(kindCreate: KindCreate, options: any = {}): RequestArgs {
            // verify required parameter 'kindCreate' is not null or undefined
            if (kindCreate === null || kindCreate === undefined) {
                throw new RequiredError('kindCreate','Required parameter kindCreate was null or undefined when calling createKindApiV1KindsPost.');
            }
            const localVarPath = `/api/v1/kinds/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof kindCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kindCreate !== undefined ? kindCreate : {}) : (kindCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an kind.
         * @summary Delete Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKindApiV1KindsIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKindApiV1KindsIdDelete.');
            }
            const localVarPath = `/api/v1/kinds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get kind by ID.
         * @summary Read Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindApiV1KindsIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readKindApiV1KindsIdGet.');
            }
            const localVarPath = `/api/v1/kinds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve kinds.
         * @summary Read Kinds
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindsApiV1KindsGet(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/kinds/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an kind.
         * @summary Update Kind
         * @param {number} id 
         * @param {KindUpdate} kindUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKindApiV1KindsIdPut(id: number, kindUpdate: KindUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateKindApiV1KindsIdPut.');
            }
            // verify required parameter 'kindUpdate' is not null or undefined
            if (kindUpdate === null || kindUpdate === undefined) {
                throw new RequiredError('kindUpdate','Required parameter kindUpdate was null or undefined when calling updateKindApiV1KindsIdPut.');
            }
            const localVarPath = `/api/v1/kinds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof kindUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kindUpdate !== undefined ? kindUpdate : {}) : (kindUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KindsApi - functional programming interface
 * @export
 */
export const KindsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new kind.
         * @summary Create Kind
         * @param {KindCreate} kindCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKindApiV1KindsPost(kindCreate: KindCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kind> {
            const localVarAxiosArgs = KindsApiAxiosParamCreator(configuration).createKindApiV1KindsPost(kindCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an kind.
         * @summary Delete Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKindApiV1KindsIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kind> {
            const localVarAxiosArgs = KindsApiAxiosParamCreator(configuration).deleteKindApiV1KindsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get kind by ID.
         * @summary Read Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindApiV1KindsIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kind> {
            const localVarAxiosArgs = KindsApiAxiosParamCreator(configuration).readKindApiV1KindsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve kinds.
         * @summary Read Kinds
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindsApiV1KindsGet(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Kind>> {
            const localVarAxiosArgs = KindsApiAxiosParamCreator(configuration).readKindsApiV1KindsGet(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an kind.
         * @summary Update Kind
         * @param {number} id 
         * @param {KindUpdate} kindUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKindApiV1KindsIdPut(id: number, kindUpdate: KindUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kind> {
            const localVarAxiosArgs = KindsApiAxiosParamCreator(configuration).updateKindApiV1KindsIdPut(id, kindUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KindsApi - factory interface
 * @export
 */
export const KindsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new kind.
         * @summary Create Kind
         * @param {KindCreate} kindCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKindApiV1KindsPost(kindCreate: KindCreate, options?: any): AxiosPromise<Kind> {
            return KindsApiFp(configuration).createKindApiV1KindsPost(kindCreate, options)(axios, basePath);
        },
        /**
         * Delete an kind.
         * @summary Delete Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKindApiV1KindsIdDelete(id: number, options?: any): AxiosPromise<Kind> {
            return KindsApiFp(configuration).deleteKindApiV1KindsIdDelete(id, options)(axios, basePath);
        },
        /**
         * Get kind by ID.
         * @summary Read Kind
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindApiV1KindsIdGet(id: number, options?: any): AxiosPromise<Kind> {
            return KindsApiFp(configuration).readKindApiV1KindsIdGet(id, options)(axios, basePath);
        },
        /**
         * Retrieve kinds.
         * @summary Read Kinds
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readKindsApiV1KindsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Kind>> {
            return KindsApiFp(configuration).readKindsApiV1KindsGet(skip, limit, options)(axios, basePath);
        },
        /**
         * Update an kind.
         * @summary Update Kind
         * @param {number} id 
         * @param {KindUpdate} kindUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKindApiV1KindsIdPut(id: number, kindUpdate: KindUpdate, options?: any): AxiosPromise<Kind> {
            return KindsApiFp(configuration).updateKindApiV1KindsIdPut(id, kindUpdate, options)(axios, basePath);
        },
    };
};

/**
 * KindsApi - object-oriented interface
 * @export
 * @class KindsApi
 * @extends {BaseAPI}
 */
export class KindsApi extends BaseAPI {
    /**
     * Create new kind.
     * @summary Create Kind
     * @param {KindCreate} kindCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KindsApi
     */
    public createKindApiV1KindsPost(kindCreate: KindCreate, options?: any) {
        return KindsApiFp(this.configuration).createKindApiV1KindsPost(kindCreate, options)(this.axios, this.basePath);
    }

    /**
     * Delete an kind.
     * @summary Delete Kind
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KindsApi
     */
    public deleteKindApiV1KindsIdDelete(id: number, options?: any) {
        return KindsApiFp(this.configuration).deleteKindApiV1KindsIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * Get kind by ID.
     * @summary Read Kind
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KindsApi
     */
    public readKindApiV1KindsIdGet(id: number, options?: any) {
        return KindsApiFp(this.configuration).readKindApiV1KindsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve kinds.
     * @summary Read Kinds
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KindsApi
     */
    public readKindsApiV1KindsGet(skip?: number, limit?: number, options?: any) {
        return KindsApiFp(this.configuration).readKindsApiV1KindsGet(skip, limit, options)(this.axios, this.basePath);
    }

    /**
     * Update an kind.
     * @summary Update Kind
     * @param {number} id 
     * @param {KindUpdate} kindUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KindsApi
     */
    public updateKindApiV1KindsIdPut(id: number, kindUpdate: KindUpdate, options?: any) {
        return KindsApiFp(this.configuration).updateKindApiV1KindsIdPut(id, kindUpdate, options)(this.axios, this.basePath);
    }

}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost.');
            }
            const localVarPath = `/api/v1/login/access-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost_1(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost_1.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginAccessTokenApiV1LoginAccessTokenPost_1.');
            }
            const localVarPath = `/api/v1/login/access-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost(email: string, options: any = {}): RequestArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling recoverPasswordApiV1PasswordRecoveryEmailPost.');
            }
            const localVarPath = `/api/v1/password-recovery/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost_2(email: string, options: any = {}): RequestArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling recoverPasswordApiV1PasswordRecoveryEmailPost_2.');
            }
            const localVarPath = `/api/v1/password-recovery/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options: any = {}): RequestArgs {
            // verify required parameter 'bodyResetPasswordApiV1ResetPasswordPost' is not null or undefined
            if (bodyResetPasswordApiV1ResetPasswordPost === null || bodyResetPasswordApiV1ResetPasswordPost === undefined) {
                throw new RequiredError('bodyResetPasswordApiV1ResetPasswordPost','Required parameter bodyResetPasswordApiV1ResetPasswordPost was null or undefined when calling resetPasswordApiV1ResetPasswordPost.');
            }
            const localVarPath = `/api/v1/reset-password/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyResetPasswordApiV1ResetPasswordPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyResetPasswordApiV1ResetPasswordPost !== undefined ? bodyResetPasswordApiV1ResetPasswordPost : {}) : (bodyResetPasswordApiV1ResetPasswordPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options: any = {}): RequestArgs {
            // verify required parameter 'bodyResetPasswordApiV1ResetPasswordPost' is not null or undefined
            if (bodyResetPasswordApiV1ResetPasswordPost === null || bodyResetPasswordApiV1ResetPasswordPost === undefined) {
                throw new RequiredError('bodyResetPasswordApiV1ResetPasswordPost','Required parameter bodyResetPasswordApiV1ResetPasswordPost was null or undefined when calling resetPasswordApiV1ResetPasswordPost_3.');
            }
            const localVarPath = `/api/v1/reset-password/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyResetPasswordApiV1ResetPasswordPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyResetPasswordApiV1ResetPasswordPost !== undefined ? bodyResetPasswordApiV1ResetPasswordPost : {}) : (bodyResetPasswordApiV1ResetPasswordPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/login/test-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost_4(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/login/test-token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost_1(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).loginAccessTokenApiV1LoginAccessTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost(email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).recoverPasswordApiV1PasswordRecoveryEmailPost(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost_2(email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).recoverPasswordApiV1PasswordRecoveryEmailPost_2(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).testTokenApiV1LoginTestTokenPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost_4(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).testTokenApiV1LoginTestTokenPost_4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<Token> {
            return LoginApiFp(configuration).loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options)(axios, basePath);
        },
        /**
         * OAuth2 compatible token login, get an access token for future requests
         * @summary Login Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAccessTokenApiV1LoginAccessTokenPost_1(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<Token> {
            return LoginApiFp(configuration).loginAccessTokenApiV1LoginAccessTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options)(axios, basePath);
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost(email: string, options?: any): AxiosPromise<Msg> {
            return LoginApiFp(configuration).recoverPasswordApiV1PasswordRecoveryEmailPost(email, options)(axios, basePath);
        },
        /**
         * Password Recovery
         * @summary Recover Password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverPasswordApiV1PasswordRecoveryEmailPost_2(email: string, options?: any): AxiosPromise<Msg> {
            return LoginApiFp(configuration).recoverPasswordApiV1PasswordRecoveryEmailPost_2(email, options)(axios, basePath);
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any): AxiosPromise<Msg> {
            return LoginApiFp(configuration).resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost, options)(axios, basePath);
        },
        /**
         * Reset password
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any): AxiosPromise<Msg> {
            return LoginApiFp(configuration).resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost, options)(axios, basePath);
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost(options?: any): AxiosPromise<Admin> {
            return LoginApiFp(configuration).testTokenApiV1LoginTestTokenPost(options)(axios, basePath);
        },
        /**
         * Test access token
         * @summary Test Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTokenApiV1LoginTestTokenPost_4(options?: any): AxiosPromise<Admin> {
            return LoginApiFp(configuration).testTokenApiV1LoginTestTokenPost_4(options)(axios, basePath);
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * OAuth2 compatible token login, get an access token for future requests
     * @summary Login Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginAccessTokenApiV1LoginAccessTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any) {
        return LoginApiFp(this.configuration).loginAccessTokenApiV1LoginAccessTokenPost(username, password, grantType, scope, clientId, clientSecret, options)(this.axios, this.basePath);
    }

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * @summary Login Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginAccessTokenApiV1LoginAccessTokenPost_1(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any) {
        return LoginApiFp(this.configuration).loginAccessTokenApiV1LoginAccessTokenPost_1(username, password, grantType, scope, clientId, clientSecret, options)(this.axios, this.basePath);
    }

    /**
     * Password Recovery
     * @summary Recover Password
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public recoverPasswordApiV1PasswordRecoveryEmailPost(email: string, options?: any) {
        return LoginApiFp(this.configuration).recoverPasswordApiV1PasswordRecoveryEmailPost(email, options)(this.axios, this.basePath);
    }

    /**
     * Password Recovery
     * @summary Recover Password
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public recoverPasswordApiV1PasswordRecoveryEmailPost_2(email: string, options?: any) {
        return LoginApiFp(this.configuration).recoverPasswordApiV1PasswordRecoveryEmailPost_2(email, options)(this.axios, this.basePath);
    }

    /**
     * Reset password
     * @summary Reset Password
     * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any) {
        return LoginApiFp(this.configuration).resetPasswordApiV1ResetPasswordPost(bodyResetPasswordApiV1ResetPasswordPost, options)(this.axios, this.basePath);
    }

    /**
     * Reset password
     * @summary Reset Password
     * @param {BodyResetPasswordApiV1ResetPasswordPost} bodyResetPasswordApiV1ResetPasswordPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost: BodyResetPasswordApiV1ResetPasswordPost, options?: any) {
        return LoginApiFp(this.configuration).resetPasswordApiV1ResetPasswordPost_3(bodyResetPasswordApiV1ResetPasswordPost, options)(this.axios, this.basePath);
    }

    /**
     * Test access token
     * @summary Test Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public testTokenApiV1LoginTestTokenPost(options?: any) {
        return LoginApiFp(this.configuration).testTokenApiV1LoginTestTokenPost(options)(this.axios, this.basePath);
    }

    /**
     * Test access token
     * @summary Test Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public testTokenApiV1LoginTestTokenPost_4(options?: any) {
        return LoginApiFp(this.configuration).testTokenApiV1LoginTestTokenPost_4(options)(this.axios, this.basePath);
    }

}


/**
 * PlacesApi - axios parameter creator
 * @export
 */
export const PlacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new place.
         * @summary Create Place
         * @param {PlaceCreate} placeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaceApiV1PlacesPost(placeCreate: PlaceCreate, options: any = {}): RequestArgs {
            // verify required parameter 'placeCreate' is not null or undefined
            if (placeCreate === null || placeCreate === undefined) {
                throw new RequiredError('placeCreate','Required parameter placeCreate was null or undefined when calling createPlaceApiV1PlacesPost.');
            }
            const localVarPath = `/api/v1/places/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof placeCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(placeCreate !== undefined ? placeCreate : {}) : (placeCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an place.
         * @summary Delete Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaceApiV1PlacesIdDelete(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePlaceApiV1PlacesIdDelete.');
            }
            const localVarPath = `/api/v1/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get place by ID.
         * @summary Read Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlaceApiV1PlacesIdGet(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling readPlaceApiV1PlacesIdGet.');
            }
            const localVarPath = `/api/v1/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve places.
         * @summary Read Places
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlacesApiV1PlacesGet(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/places/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an place.
         * @summary Update Place
         * @param {number} id 
         * @param {PlaceUpdate} placeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlaceApiV1PlacesIdPut(id: number, placeUpdate: PlaceUpdate, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePlaceApiV1PlacesIdPut.');
            }
            // verify required parameter 'placeUpdate' is not null or undefined
            if (placeUpdate === null || placeUpdate === undefined) {
                throw new RequiredError('placeUpdate','Required parameter placeUpdate was null or undefined when calling updatePlaceApiV1PlacesIdPut.');
            }
            const localVarPath = `/api/v1/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof placeUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(placeUpdate !== undefined ? placeUpdate : {}) : (placeUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlacesApi - functional programming interface
 * @export
 */
export const PlacesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new place.
         * @summary Create Place
         * @param {PlaceCreate} placeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaceApiV1PlacesPost(placeCreate: PlaceCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Place> {
            const localVarAxiosArgs = PlacesApiAxiosParamCreator(configuration).createPlaceApiV1PlacesPost(placeCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an place.
         * @summary Delete Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaceApiV1PlacesIdDelete(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Place> {
            const localVarAxiosArgs = PlacesApiAxiosParamCreator(configuration).deletePlaceApiV1PlacesIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get place by ID.
         * @summary Read Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlaceApiV1PlacesIdGet(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Place> {
            const localVarAxiosArgs = PlacesApiAxiosParamCreator(configuration).readPlaceApiV1PlacesIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve places.
         * @summary Read Places
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlacesApiV1PlacesGet(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Place>> {
            const localVarAxiosArgs = PlacesApiAxiosParamCreator(configuration).readPlacesApiV1PlacesGet(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an place.
         * @summary Update Place
         * @param {number} id 
         * @param {PlaceUpdate} placeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlaceApiV1PlacesIdPut(id: number, placeUpdate: PlaceUpdate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Place> {
            const localVarAxiosArgs = PlacesApiAxiosParamCreator(configuration).updatePlaceApiV1PlacesIdPut(id, placeUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PlacesApi - factory interface
 * @export
 */
export const PlacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new place.
         * @summary Create Place
         * @param {PlaceCreate} placeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaceApiV1PlacesPost(placeCreate: PlaceCreate, options?: any): AxiosPromise<Place> {
            return PlacesApiFp(configuration).createPlaceApiV1PlacesPost(placeCreate, options)(axios, basePath);
        },
        /**
         * Delete an place.
         * @summary Delete Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePlaceApiV1PlacesIdDelete(id: number, options?: any): AxiosPromise<Place> {
            return PlacesApiFp(configuration).deletePlaceApiV1PlacesIdDelete(id, options)(axios, basePath);
        },
        /**
         * Get place by ID.
         * @summary Read Place
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlaceApiV1PlacesIdGet(id: number, options?: any): AxiosPromise<Place> {
            return PlacesApiFp(configuration).readPlaceApiV1PlacesIdGet(id, options)(axios, basePath);
        },
        /**
         * Retrieve places.
         * @summary Read Places
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPlacesApiV1PlacesGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Place>> {
            return PlacesApiFp(configuration).readPlacesApiV1PlacesGet(skip, limit, options)(axios, basePath);
        },
        /**
         * Update an place.
         * @summary Update Place
         * @param {number} id 
         * @param {PlaceUpdate} placeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlaceApiV1PlacesIdPut(id: number, placeUpdate: PlaceUpdate, options?: any): AxiosPromise<Place> {
            return PlacesApiFp(configuration).updatePlaceApiV1PlacesIdPut(id, placeUpdate, options)(axios, basePath);
        },
    };
};

/**
 * PlacesApi - object-oriented interface
 * @export
 * @class PlacesApi
 * @extends {BaseAPI}
 */
export class PlacesApi extends BaseAPI {
    /**
     * Create new place.
     * @summary Create Place
     * @param {PlaceCreate} placeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public createPlaceApiV1PlacesPost(placeCreate: PlaceCreate, options?: any) {
        return PlacesApiFp(this.configuration).createPlaceApiV1PlacesPost(placeCreate, options)(this.axios, this.basePath);
    }

    /**
     * Delete an place.
     * @summary Delete Place
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public deletePlaceApiV1PlacesIdDelete(id: number, options?: any) {
        return PlacesApiFp(this.configuration).deletePlaceApiV1PlacesIdDelete(id, options)(this.axios, this.basePath);
    }

    /**
     * Get place by ID.
     * @summary Read Place
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public readPlaceApiV1PlacesIdGet(id: number, options?: any) {
        return PlacesApiFp(this.configuration).readPlaceApiV1PlacesIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve places.
     * @summary Read Places
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public readPlacesApiV1PlacesGet(skip?: number, limit?: number, options?: any) {
        return PlacesApiFp(this.configuration).readPlacesApiV1PlacesGet(skip, limit, options)(this.axios, this.basePath);
    }

    /**
     * Update an place.
     * @summary Update Place
     * @param {number} id 
     * @param {PlaceUpdate} placeUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApi
     */
    public updatePlaceApiV1PlacesIdPut(id: number, placeUpdate: PlaceUpdate, options?: any) {
        return PlacesApiFp(this.configuration).updatePlaceApiV1PlacesIdPut(id, placeUpdate, options)(this.axios, this.basePath);
    }

}


/**
 * UtilsApi - axios parameter creator
 * @export
 */
export const UtilsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Presigned Url
         * @param {string} ext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresignedUrlApiV1UtilsGeturlPost(ext: string, options: any = {}): RequestArgs {
            // verify required parameter 'ext' is not null or undefined
            if (ext === null || ext === undefined) {
                throw new RequiredError('ext','Required parameter ext was null or undefined when calling getPresignedUrlApiV1UtilsGeturlPost.');
            }
            const localVarPath = `/api/v1/utils/geturl/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (ext !== undefined) {
                localVarQueryParameter['ext'] = ext;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options: any = {}): RequestArgs {
            // verify required parameter 'msg' is not null or undefined
            if (msg === null || msg === undefined) {
                throw new RequiredError('msg','Required parameter msg was null or undefined when calling testCeleryApiV1UtilsTestCeleryPost.');
            }
            const localVarPath = `/api/v1/utils/test-celery/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof msg !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(msg !== undefined ? msg : {}) : (msg || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test emails.
         * @summary Test Email
         * @param {string} emailTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEmailApiV1UtilsTestEmailPost(emailTo: string, options: any = {}): RequestArgs {
            // verify required parameter 'emailTo' is not null or undefined
            if (emailTo === null || emailTo === undefined) {
                throw new RequiredError('emailTo','Required parameter emailTo was null or undefined when calling testEmailApiV1UtilsTestEmailPost.');
            }
            const localVarPath = `/api/v1/utils/test-email/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("OAuth2PasswordBearer", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (emailTo !== undefined) {
                localVarQueryParameter['email_to'] = emailTo;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsApi - functional programming interface
 * @export
 */
export const UtilsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Presigned Url
         * @param {string} ext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresignedUrlApiV1UtilsGeturlPost(ext: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = UtilsApiAxiosParamCreator(configuration).getPresignedUrlApiV1UtilsGeturlPost(ext, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = UtilsApiAxiosParamCreator(configuration).testCeleryApiV1UtilsTestCeleryPost(msg, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Test emails.
         * @summary Test Email
         * @param {string} emailTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEmailApiV1UtilsTestEmailPost(emailTo: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Msg> {
            const localVarAxiosArgs = UtilsApiAxiosParamCreator(configuration).testEmailApiV1UtilsTestEmailPost(emailTo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UtilsApi - factory interface
 * @export
 */
export const UtilsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Presigned Url
         * @param {string} ext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresignedUrlApiV1UtilsGeturlPost(ext: string, options?: any): AxiosPromise<Msg> {
            return UtilsApiFp(configuration).getPresignedUrlApiV1UtilsGeturlPost(ext, options)(axios, basePath);
        },
        /**
         * Test Celery worker.
         * @summary Test Celery
         * @param {Msg} msg 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: any): AxiosPromise<Msg> {
            return UtilsApiFp(configuration).testCeleryApiV1UtilsTestCeleryPost(msg, options)(axios, basePath);
        },
        /**
         * Test emails.
         * @summary Test Email
         * @param {string} emailTo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testEmailApiV1UtilsTestEmailPost(emailTo: string, options?: any): AxiosPromise<Msg> {
            return UtilsApiFp(configuration).testEmailApiV1UtilsTestEmailPost(emailTo, options)(axios, basePath);
        },
    };
};

/**
 * UtilsApi - object-oriented interface
 * @export
 * @class UtilsApi
 * @extends {BaseAPI}
 */
export class UtilsApi extends BaseAPI {
    /**
     * 
     * @summary Get Presigned Url
     * @param {string} ext 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public getPresignedUrlApiV1UtilsGeturlPost(ext: string, options?: any) {
        return UtilsApiFp(this.configuration).getPresignedUrlApiV1UtilsGeturlPost(ext, options)(this.axios, this.basePath);
    }

    /**
     * Test Celery worker.
     * @summary Test Celery
     * @param {Msg} msg 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public testCeleryApiV1UtilsTestCeleryPost(msg: Msg, options?: any) {
        return UtilsApiFp(this.configuration).testCeleryApiV1UtilsTestCeleryPost(msg, options)(this.axios, this.basePath);
    }

    /**
     * Test emails.
     * @summary Test Email
     * @param {string} emailTo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public testEmailApiV1UtilsTestEmailPost(emailTo: string, options?: any) {
        return UtilsApiFp(this.configuration).testEmailApiV1UtilsTestEmailPost(emailTo, options)(this.axios, this.basePath);
    }

}


